initSidebarItems({"fn":[["abs_diff","Filter using `AbsDiff`: D = | S1 - S2 |."],["add","Filter using Add: D = saturation255(S1 + S2)."],["add_byte","Filter using `AddByte`: D = saturation255(S + C)."],["add_byte_to_half","Filter using `AddByteToHalf`: D = saturation255(S/2 + C)."],["add_uint","Filter using `AddUint`: D = saturation255((S[i] + Cs[i % 4]), Cs=Swap32((uint)C)."],["binarize_using_threshold","Filter using `BinarizeUsingThreshold`: D = (S >= T) ? 255:0."],["bit_and","Filter using `BitAnd`: D = S1 & S2."],["bit_negation","Filter using `BitNegation`: D = !S."],["bit_or","Filter using `BitOr`: D = S1 | S2."],["clip_to_range","Filter using `ClipToRange`: D = (S >= Tmin) & (S <= Tmax) S:Tmin | Tmax."],["div","Filter using Div: D = S1 / S2."],["mean","Filter using Mean: D = S1/2 + S2/2."],["mmx_detect","MMX detection routine (with override flag)."],["mmx_off","Disable MMX check for filter functions and and force to use non-MMX C based code."],["mmx_on","Enable MMX check for filter functions and use MMX code if available."],["mult","Filter using Mult: D = saturation255(S1 * S2)."],["mult_by_byte","Filter using `MultByByte`: D = saturation255(S * C)."],["mult_div_by2","Filter using `MultDivby2`: D = saturation255(S1/2 * S2)."],["mult_div_by4","Filter using `MultDivby4`: D = saturation255(S1/2 * S2/2)."],["mult_nor","Filter using `MultNor`: D = S1 * S2."],["normalize_linear","Filter using `NormalizeLinear`: D = saturation255((Nmax - Nmin)/(Cmax - Cmin)*(S - Cmin) + Nmin)."],["shift_left","Filter `ShiftLeft`: D = saturation255(S << N)."],["shift_left_byte","Filter using `ShiftLeftByte`: D = (S << N)."],["shift_left_uint","Filter using `ShiftLeftUint`: D = ((uint)S << N)."],["shift_right","Filter using `ShiftRight`: D = saturation0(S >> N)."],["shift_right_and_mult_by_byte","Filter using `ShiftRightAndMultByByte`: D = saturation255((S >> N) * C)."],["shift_right_uint","Filter using `ShiftRightUint`: D = saturation0((uint)S[i] >> N)."],["sub","Filter using Sub: D = saturation0(S1 - S2)."],["sub_byte","Filter using `SubByte`: D = saturation0(S - C)."],["sub_uint","Filter using `SubUint`: D = saturation0(S[i] - Cs[i % 4]), Cs=Swap32((uint)C)."]]});